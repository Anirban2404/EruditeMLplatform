,{
"cell_type": "code",
"execution_count": 1,
"metadata": {
"collapsed": true
},
"outputs": [],
"source": ["import panda as pd\nhousePrice = pd.read_csv('cal_housing_clean.csv')\nhousePrice.head()"]
    }
,{
"cell_type": "code",
"execution_count": 3,
"metadata": {
"collapsed": true
},
"outputs": [],
"source": ["x_data = housePrice.drop('medianHouseValue',axis=1)\ny_data = housePrice['medianHouseValue']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x_data,y_data,test_size=0.3, random_state=101)"]
    }
,{
"cell_type": "code",
"execution_count": 4,
"metadata": {
"collapsed": true
},
"outputs": [],
"source": ["from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(X_train)\nX_train = pd.DataFrame(data=scaler.transform(X_train),columns = X_train.columns,index=X_train.index)\nX_test = pd.DataFrame(data=scaler.transform(X_test),columns = X_test.columns,index=X_test.index)\nX_test"]
    }
,{
"cell_type": "code",
"execution_count": 5,
"metadata": {
"collapsed": true
},
"outputs": [],
"source": ["import tensorflow as tf\nage = tf.feature_column.numeric_column('housingMedianAge')\nrooms = tf.feature_column.numeric_column('totalRooms')\nbedrooms = tf.feature_column.numeric_column('totalBedrooms')\npop = tf.feature_column.numeric_column('population')\nhouseholds = tf.feature_column.numeric_column('households')\nincome = tf.feature_column.numeric_column('medianIncome')\nfeat_cols = [ age,rooms,bedrooms,pop,households,income]\ninput_func = tf.estimator.inputs.pandas_input_fn(x=X_train,y=y_train ,batch_size=10,num_epochs=10000,\n                                            shuffle=True)\nmodel = tf.estimator.DNNRegressor(hidden_units=[6,6,6],feature_columns=feat_cols)\nmodel.train(input_fn=input_func,steps=2000)\npredict_input_func = tf.estimator.inputs.pandas_input_fn(\n      x=X_test,\n      batch_size=10,\n      num_epochs=1,\n      shuffle=False)\npredictions = model.predict(predict_input_func)\npredList = list(predictions)\npredList"]
    }
,{
"cell_type": "code",
"execution_count": 6,
"metadata": {
"collapsed": true
},
"outputs": [],
"source": ["final_preds = []\nfor pred in predList:\n    final_preds.append(pred['predictions'])\nfrom sklearn.metrics import mean_squared_error\nmean_squared_error(y_test,final_preds)**0.5"]
    }
